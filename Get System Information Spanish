	

    ;###########################################
    ; LENGUAJE
    ;###########################################
    languageCode_0436 = República Sudafricana
    languageCode_041c = Albania
    languageCode_0401 = Árabe Arabia Saudita
    languageCode_0801 = Árabe Irak
    languageCode_0c01 = Árabe Egipto
    languageCode_0401 = Árabe Arabia Saudita
    languageCode_0801 = Árabe Irak
    languageCode_0c01 = Árabe Egipto
    languageCode_1001 = Árabe Libia
    languageCode_1401 = Árabe Argelia
    languageCode_1801 = Árabe Marruecos
    languageCode_1c01 = Árabe Túnez
    languageCode_2001 = Árabe Omán
    languageCode_2401 = Árabe Yemen
    languageCode_2801 = Árabe Siria
    languageCode_2c01 = Árabe Jordania
    languageCode_3001 = Árabe Líbano
    languageCode_3401 = Árabe Kuwait
    languageCode_3801 = Árabe UAE
    languageCode_3c01 = Árabe Bahrein
    languageCode_4001 = Árabe Qatar
    languageCode_042b = Armenia
    languageCode_042c = Azeri Latin
    languageCode_082c = Azeri cirílico
    languageCode_042d = Vasco
    languageCode_0423 = Bielorrusa
    languageCode_0402 = Bulgaria
    languageCode_0403 = Catalan
    languageCode_0404 = China Taiwan
    languageCode_0804 = China PRC
    languageCode_0c04 = China Hong Kong
    languageCode_1004 = China Singapur
    languageCode_1404 = China Macao
    languageCode_041a = Croacia
    languageCode_0405 = República Checa
    languageCode_0406 = Danés
    languageCode_0413 = Holandés Estándar
    languageCode_0813 = Holandés Belga
    languageCode_0409 = Inglés Estados Unidos
    languageCode_0809 = Inglés Reino Unido
    languageCode_0c09 = Inglés Australiano
    languageCode_1009 = Inglés Canadian
    languageCode_1409 = Inglés Nueva Zelanda
    languageCode_1809 = Inglés irlandés
    languageCode_1c09 = Inglés Sudáfrica
    languageCode_2009 = Inglés Jamaica
    languageCode_2409 = Inglés Caribe
    languageCode_2809 = Inglés Belice
    languageCode_2c09 = Inglés Trinidad
    languageCode_3009 = Inglés Zimbabwe
    languageCode_3409 = Inglés Filipinas
    languageCode_0425 = Estonia
    languageCode_0438 = Islas Feroe
    languageCode_0429 = Farsi
    languageCode_040b = Finlandés
    languageCode_040c = Francés Estándar
    languageCode_080c = Francés Belga
    languageCode_0c0c = Francés Canadá
    languageCode_100c = Francés Suiza
    languageCode_140c = Francés Luxemburgo
    languageCode_180c = Francés Mónaco
    languageCode_0437 = Georgian
    languageCode_0407 = Alemaña Estándar
    languageCode_0807 = Alemaña Suiza
    languageCode_0c07 = Alemaña Austria
    languageCode_1007 = Alemaña Luxemburgo
    languageCode_1407 = Alemaña Liechtenstein
    languageCode_0408 = Griego
    languageCode_040d = Hbreo
    languageCode_0439 = Indi
    languageCode_040e = Húngaro
    languageCode_040f = Islandés
    languageCode_0421 = Indonesia
    languageCode_0410 = Italia Estándar
    languageCode_0810 = Italia Suiza
    languageCode_0411 = Japonés
    languageCode_043f = Kazajo
    languageCode_0457 = Konkani
    languageCode_0412 = Corea
    languageCode_0426 = Letón
    languageCode_0427 = Lituania
    languageCode_042f = Macedonia
    languageCode_043e = Malayo Malasia
    languageCode_083e = Malayo Brunei Darussalam
    languageCode_044e = Marathi
    languageCode_0414 = Noruego Bokmal
    languageCode_0814 = Noruego Nynorsk
    languageCode_0415 = Polaco
    languageCode_0416 = Portugués Brasileño
    languageCode_0816 = Portugués Estándar
    languageCode_0418 = Rumania
    languageCode_0419 = Rusia
    languageCode_044f = Sánscrito
    languageCode_081a = Serbio América
    languageCode_0c1a = Cirílico Serbio
    languageCode_041b = Eslovaca
    languageCode_0424 = Esloveno
    languageCode_040a = Español Tradicional Corto
    languageCode_080a = Español mexico
    languageCode_0c0a = Español Moderno Corto
    languageCode_100a = Español Guatemala
    languageCode_140a = Español Costa Rica
    languageCode_180a = Español Panamá
    languageCode_1c0a = Español República Dominicana
    languageCode_200a = Español Venezuela
    languageCode_240a = Español Colombia
    languageCode_280a = Español Perú
    languageCode_2c0a = Español Argentina
    languageCode_300a = Español Ecuador
    languageCode_340a = Español Chile
    languageCode_380a = Español Uruguay
    languageCode_3c0a = Español Paraguay
    languageCode_400a = Español Bolivia
    languageCode_440a = Español El Salvador
    languageCode_480a = Español Honduras
    languageCode_4c0a = Español Nicaragua
    languageCode_500a = Español Puerto Rico
    languageCode_0441 = Swahili
    languageCode_041d = Sueco
    languageCode_081d = Sueco Finlandia
    languageCode_0449 = Tamil
    languageCode_0444 = Tártaro
    languageCode_041e = Tailandes
    languageCode_041f = Turco
    languageCode_0422 = Ucraniano
    languageCode_0420 = Urdu
    languageCode_0443 = Uzbeco América
    languageCode_0843 = Uzbeco Cirílico
    languageCode_042a = Vietnamita
     
    ;###########################################
    ; COMPUTADORA
    ;###########################################
    strComputer := "."
    objWMIService := ComObjGet("winmgmts:{impersonationLevel=impersonate}!\\" . strComputer . "\root\cimv2")
    colSettings := objWMIService.ExecQuery("Select * from Win32_ComputerSystem")._NewEnum
    While colSettings[strCSItem]
    {
      PC_AutomaticManagedPagefile := strCSItem.AutomaticManagedPagefile
      PC_BootOptionOnLimit := strCSItem.BootOptionOnLimit
      PC_NameFormat := strCSItem.NameFormat
      PC_AdminPasswordStatus := strCSItem.AdminPasswordStatus
      PC_AutomaticResetBootOption := strCSItem.AutomaticResetBootOption
      PC_AutomaticResetCapability := strCSItem.AutomaticResetCapability
      PC_BootROMSupported := strCSItem.BootROMSupported
      PC_BootupState := strCSItem.BootupState
      PC_Caption := strCSItem.Caption
      PC_ChassisBootupState := strCSItem.ChassisBootupState
      PC_CurrentTimeZone := strCSItem.CurrentTimeZone
      PC_DaylightInEffect := strCSItem.DaylightInEffect
      PC_Description := strCSItem.Description
      PC_Domain := strCSItem.Domain
      PC_DomainRole := strCSItem.DomainRole
      PC_EnableDaylightSavingsTime := strCSItem.EnableDaylightSavingsTime
      PC_FrontPanelResetStatus := strCSItem.FrontPanelResetStatus
      PC_InfraredSupported := strCSItem.InfraredSupported
      PC_KeyboardPasswordStatus := strCSItem.KeyboardPasswordStatus
      PC_Manufacturer := strCSItem.Manufacturer
      PC_Name := strCSItem.Name
      PC_NetworkServerModeEnabled := strCSItem.NetworkServerModeEnabled
      PC_NumberOfLogicalProcessors := strCSItem.NumberOfLogicalProcessors
      PC_NumberOfProcessors := strCSItem.NumberOfProcessors
      PC_OEMStringArray := strCSItem.OEMStringArray
      PC_PartOfDomain := strCSItem.PartOfDomain
      PC_PauseAfterReset := strCSItem.PauseAfterReset
      PC_PowerOnPasswordStatus := strCSItem.PowerOnPasswordStatus
      PC_PowerState := strCSItem.PowerState
      PC_PowerSupplyState := strCSItem.PowerSupplyState
      PC_PrimaryOwnerContact := strCSItem.PrimaryOwnerContact
      PC_PrimaryOwnerName := strCSItem.PrimaryOwnerName
      PC_ResetCapability := strCSItem.ResetCapability
      PC_ResetCount := strCSItem.ResetCount
      PC_ResetLimit := strCSItem.ResetLimit
      PC_Roles := strCSItem.Roles
      PC_Status := strCSItem.Status
      PC_SupportContactDescription := strCSItem.SupportContactDescription
      PC_SystemStartupDelay := strCSItem.SystemStartupDelay
      PC_SystemStartupOptions := strCSItem.SystemStartupOptions
      PC_SystemStartupSetting := strCSItem.SystemStartupSetting
      PC_SystemType := strCSItem.SystemType
      PC_ThermalState := strCSItem.ThermalState
      PC_TotalPhysicalMemory := Round(strCSItem.TotalPhysicalMemory/(1024*1024),0) . " MB"
      PC_UserName := strCSItem.UserName
      PC_WakeUpType := strCSItem.WakeUpType
      PC_Workgroup := strCSItem.Workgroup
      PC_Model := strCSItem.Model ;MODELO
    }  
     
    ;###########################################
    ; SISTEMA
    ;###########################################
    strComputer := "."
    objWMIService := ComObjGet("winmgmts:{impersonationLevel=impersonate}!\\" . strComputer . "\root\cimv2")
    colSettings := objWMIService.ExecQuery("Select * from Win32_OperatingSystem")._NewEnum
    While colSettings[objOSItem]
    {
      System_BootDevice := objOSItem.BootDevice
      System_BuildNumber := objOSItem.BuildNumber
      System_BuildType := objOSItem.BuildType
      System_Caption := objOSItem.Caption
      System_CountryCode := objOSItem.CountryCode
      System_CreationClassName := objOSItem.CreationClassName
      System_CSDVersion := objOSItem.CSDVersion
      System_CSName := objOSItem.CSName
      System_CurrentTimeZone := objOSItem.CurrentTimeZone
      System_Distributed := objOSItem.Distributed
      System_EncryptionLevel := objOSItem.EncryptionLevel
      System_FreePhysicalMemory := Round(objOSItem.FreePhysicalMemory/(1024*1024),0) . " MB"
      System_FreeSpaceInPagingFiles := Round(objOSItem.FreeSpaceInPagingFiles/(1024*1024),0) . " MB"
      System_FreeVirtualMemory := Round(objOSItem.FreeVirtualMemory/(1024*1024),0) . " MB"
      System_InstallDate := objOSItem.InstallDate
      System_LargeSystemCache := objOSItem.LargeSystemCache
      System_LastBootUpTime := objOSItem.LastBootUpTime
      System_LocalDateTime := objOSItem.LocalDateTime
      System_Locale := objOSItem.Locale
      System_Manufacturer := objOSItem.Manufacturer
      System_MaxNumberOfProcesses := objOSItem.MaxNumberOfProcesses
      System_MaxProcessMemorySize := objOSItem.MaxProcessMemorySize
      System_Name := objOSItem.Name
      System_NumberOfLicensedUsers := objOSItem.NumberOfLicensedUsers
      System_NumberOfProcesses := objOSItem.NumberOfProcesses
      System_NumberOfUsers := objOSItem.NumberOfUsers
      System_Organization := objOSItem.Organization
      System_OSArchitecture := objOSItem.OSArchitecture
      System_OSLanguage := objOSItem.OSLanguage
      System_OSType := objOSItem.OSType
      System_Primary := objOSItem.Primary
      System_ProductType := objOSItem.ProductType
      System_RegisteredUser := objOSItem.RegisteredUser
      System_SerialNumber := objOSItem.SerialNumber
      System_ServicePackMajorVersion := objOSItem.ServicePackMajorVersion
      System_ServicePackMinorVersion := objOSItem.ServicePackMinorVersion
      System_SizeStoredInPagingFiles := objOSItem.SizeStoredInPagingFiles
      System_Status := objOSItem.Status
      System_SuiteMask := objOSItem.SuiteMask
      System_Device := objOSItem.SystemDevice
      System_Directory := objOSItem.SystemDirectory
      System_Drive := objOSItem.SystemDrive
      System_TotalSwapSpaceSize := objOSItem.TotalSwapSpaceSize
      System_TotalVirtualMemorySize := Round(objOSItem.TotalVirtualMemorySize/(1024*1024),0) . " MB"
      System_TotalVisibleMemorySize := Round(objOSItem.TotalVisibleMemorySize/(1024*1024),0) . " MB"
      System_Version := objOSItem.Version
      System_WindowsDirectory := objOSItem.WindowsDirectory
      RegRead, System_DumpFile, HKEY_LOCAL_MACHINE, System\CurrentControlSet\Control\CrashControl, DumpFile
      RegRead, System_MinidumpDir, HKEY_LOCAL_MACHINE, System\CurrentControlSet\Control\CrashControl, MinidumpDir
      RegRead, System_StartOptions, HKEY_LOCAL_MACHINE, SYSTEM\CurrentControlSet\Control, SystemStartOptions
      System_Language := languageCode_%A_Language%
    }
     
    ;###########################################
    ; INFORMACION DE USUARIO
    ;###########################################
    strComputer := "."
    strNamespace := "\root\cimv2"
    objWMI := ComObjGet("winmgmts:\\"  strComputer  strNamespace)
    colCS := objWMI.ExecQuery("SELECT * FROM Win32_ComputerSystem")
    For objSession in colCS
            PC_CurrentUser := objSession.UserName ;USUARIO ACTUAL
     
    ;###########################################
    ; MOUSE
    ;###########################################
    strComputer := "."
    objWMIService := ComObjGet("winmgmts:{impersonationLevel=impersonate}!\\" . strComputer . "\root\cimv2")
    colItems := objWMIService.ExecQuery("Select * from Win32_PointingDevice")._NewEnum
    While colItems[objItem]
    {
        Mouse_Description := objItem.Description
        Mouse_DeviceID := objItem.DeviceID
        Mouse_DeviceInterface := objItem.DeviceInterface
        Mouse_DoubleSpeedThreshold := objItem.DoubleSpeedThreshold
        Mouse_Handedness := objItem.Handedness
        Mouse_HardwareType := objItem.HardwareType
        Mouse_INFFileName := objItem.InfFileName
        Mouse_INFSection := objItem.InfSection
        Mouse_Manufacturer := objItem.Manufacturer
        Mouse_Name := objItem.Name
        Mouse_NumberOfButtons := objItem.NumberOfButtons
        Mouse_PNPDeviceID := objItem.PNPDeviceID
        Mouse_PointingType := objItem.PointingType
        Mouse_QuadSpeedThreshold := objItem.QuadSpeedThreshold
        Mouse_Resolution := objItem.Resolution
        Mouse_SampleRate := objItem.SampleRate
        Mouse_Synch := objItem.Synch
            Mouse_Speed := DllCall("SystemParametersInfo", UInt, 0x70, UInt, 0, UIntP, GetMouseSpeedUp, UInt, 0)
    }
           
    ;###########################################
    ; ESCRITORIO
    ;###########################################
    strComputer := "."
    objWMIService := ComObjGet("winmgmts:{impersonationLevel=impersonate}!\\" . strComputer . "\root\cimv2")
    colItems := objWMIService.ExecQuery("Select * from Win32_Desktop")._NewEnum
    While colItems[objItem]
    {
        Desktop_BorderWidth := objItem.BorderWidth
        Desktop_Caption := objItem.Caption
        Desktop_CoolSwitch := objItem.CoolSwitch
        Desktop_CursorBlinkRate := objItem.CursorBlinkRate
        Desktop_Description := objItem.Description
        Desktop_DragFullWindows := objItem.DragFullWindows
        Desktop_GridGranularity := objItem.GridGranularity
        Desktop_IconSpacing := objItem.IconSpacing
        Desktop_IconTitleFaceName := objItem.IconTitleFaceName
        Desktop_IconTitleSize := objItem.IconTitleSize
        Desktop_IconTitleWrap := objItem.IconTitleWrap
        Desktop_Name := objItem.Name
        Desktop_Pattern := objItem.Pattern
        Desktop_ScreenSaverActive := objItem.ScreenSaverActive
        Desktop_ScreenSaverExecutable := objItem.ScreenSaverExecutable
        Desktop_ScreenSaverSecure := objItem.ScreenSaverSecure
        Desktop_ScreenSaverTimeout := objItem.ScreenSaverTimeout
        Desktop_SettingID := objItem.SettingID
        Desktop_Wallpaper := objItem.Wallpaper
        Desktop_WallpaperStretched := objItem.WallpaperStretched
        Desktop_WallpaperTiled := objItem.WallpaperTiled
    }
     
    ;###########################################
    ; BIOS
    ;###########################################
    strComputer := "."
    objWMIService := ComObjGet("winmgmts:{impersonationLevel=impersonate}!\\" . strComputer . "\root\cimv2")
    colSettings := objWMIService.ExecQuery("Select * from Win32_BIOS")._NewEnum
    While colSettings[objBiosItem]
    {
      BIOS_Version := objBiosItem.BIOSVersion
      BIOS_BuildNumber := objBiosItem.BuildNumber
      BIOS_Caption := objBiosItem.Caption
      BIOS_CurrentLanguage := objBiosItem.CurrentLanguage
      BIOS_Description := objBiosItem.Description
      BIOS_InstallableLanguages := objBiosItem.InstallableLanguages
      BIOS_InstallDate := objBiosItem.InstallDate
      BIOS_ListOfLanguages := objBiosItem.ListOfLanguages
      BIOS_Manufacturer := objBiosItem.Manufacturer
      BIOS_Name := objBiosItem.Name
      BIOS_PrimaryBIOS := objBiosItem.PrimaryBIOS
      BIOS_ReleaseDate := objBiosItem.ReleaseDate
      BIOS_SerialNumber2 := objBiosItem.SerialNumber
      BIOS_SMBIOSBIOSVersion := objBiosItem.SMBIOSBIOSVersion
      BIOS_SMBIOSMajorVersion := objBiosItem.SMBIOSMajorVersion
      BIOS_SMBIOSMinorVersion := objBiosItem.SMBIOSMinorVersion
      BIOS_SMBIOSPresent := objBiosItem.SMBIOSPresent
      BIOS_SoftwareElementID := objBiosItem.SoftwareElementID
      BIOS_SoftwareElementState := objBiosItem.SoftwareElementState
      BIOS_Status := objBiosItem.Status
      BIOS_TargetOperatingSystem := objBiosItem.TargetOperatingSystem
      BIOS_Version := objBiosItem.Version
      BIOS_BiosCharacteristics := objBiosItem.BiosCharacteristics
      BIOS_InstallableLanguages := objBiosItem.InstallableLanguages
      BIOS_InstallDate := objBiosItem.InstallDate
      BIOS_PrimaryBIOS := objBiosItem.PrimaryBIOS
      BIOS_ReleaseDate := objBiosItem.ReleaseDate
      BIOS_SMBIOSMajorVersion := objBiosItem.SMBIOSMajorVersion
      BIOS_SMBIOSMinorVersion := objBiosItem.SMBIOSMinorVersion
      BIOS_SMBIOSPresent := objBiosItem.SMBIOSPresent
      BIOS_SoftwareElementState := objBiosItem.SoftwareElementState
      BIOS_TargetOperatingSystem := objBiosItem.TargetOperatingSystem
    }      
     
    ;###########################################
    ; RED
    ;###########################################
    objWMIService := ComObjGet("winmgmts:\\.\root\cimv2")
    colItems := objWMIService.ExecQuery("Select * from Win32_NetworkAdapterConfiguration WHERE IPEnabled = True")._NewEnum
    while colItems[objItem]
    {
            Network_MacAdress := objItem.MACAddress
            Network_Caption := objItem.Caption
            Network_DatabasePath := objItem.DatabasePath
            Network_Description := objItem.Description
            Network_DHCPServer := objItem.DHCPServer
            Network_DNSDomain := objItem.DNSDomain
            Network_DNSDomainSuffixSearchOrder := objItem.DNSDomainSuffixSearchOrder
            Network_DNSHostName := objItem.DNSHostName
            Network_DNSServerSearchOrder := objItem.DNSServerSearchOrder
            Network_IPAddress := objItem.IPAddress
            Network_IPSecPermitIPProtocols := objItem.IPSecPermitIPProtocols
            Network_IPSecPermitTCPPorts := objItem.IPSecPermitTCPPorts
            Network_IPSecPermitUDPPorts := objItem.IPSecPermitUDPPorts
            Network_IPSubnet := objItem.IPSubnet
            Network_IPXAddress := objItem.IPXAddress
            Network_IPXNetworkNumber := objItem.IPXNetworkNumber
            Network_IPXVirtualNetNumber := objItem.IPXVirtualNetNumber
            Network_MACAddress := objItem.MACAddress
            Network_ServiceName := objItem.ServiceName
            Network_SettingID := objItem.SettingID
            Network_WINSHostLookupFile := objItem.WINSHostLookupFile
            Network_WINSPrimaryServer := objItem.WINSPrimaryServer
            Network_WINSScopeID := objItem.WINSScopeID
            Network_WINSSecondaryServer := objItem.WINSSecondaryServer
    }
     
    ;###########################################
    ; MONITOR
    ;###########################################
    SysGet, MonitorCount, MonitorCount
    SysGet, MonitorPrimary, MonitorPrimary
    SysGet, MonitorName, MonitorName
    SysGet, Monitor, Monitor
    SysGet, MonitorWorkArea, MonitorWorkArea,
     
    ;###########################################
    ; MEMORIA
    ;###########################################
    objWMIService := ComObjGet("winmgmts:\\.\root\cimv2")
    colItems := objWMIService.ExecQuery("Select * from Win32_PhysicalMemory")._NewEnum
    while colItems[objItem]
    {
      MEM_Caption := objItem.Caption
      MEM_BankLabel := objItem.BankLabel
      MEM_Capacity := objItem.Capacity
      MEM_CreationClassName := objItem.CreationClassName
      MEM_DataWidth := objItem.DataWidth
      MEM_Description := objItem.Description
      MEM_DeviceLocator := objItem.DeviceLocator
      MEM_FormFactor := objItem.FormFactor
      MEM_HotSwappable := objItem.HotSwappable
      MEM_InstallDate := objItem.InstallDate
      MEM_InterleaveDataDepth := objItem.InterleaveDataDepth
      MEM_InterleavePosition := objItem.InterleavePosition
      MEM_Manufacturer := objItem.Manufacturer
      MEM_MemoryType := objItem.MemoryType
      MEM_Model := objItem.Model
      MEM_Name := objItem.Name
      MEM_OtherIdentifyingInfo := objItem.OtherIdentifyingInfo
      MEM_PartNumber := objItem.PartNumber
      MEM_PositionInRow := objItem.PositionInRow
      MEM_PoweredOn := objItem.PositionInRow
      MEM_Removable := objItem.Removable
      MEM_Replaceable := objItem.Replaceable
      MEM_SerialNumber := objItem.SerialNumber
      MEM_SKU := objItem.SKU
      MEM_Speed := objItem.Speed
      MEM_Status := objItem.Status
      MEM_Tag := objItem.Tag
      MEM_TotalWidth := objItem.TotalWidth
      MEM_TypeDetail := objItem.TypeDetail
      MEM_Version := objItem.Version
    }
    DllCall("kernel32.dll\GetPhysicallyInstalledSystemMemory", "UInt64*", MEM_Ram)
    ReadInteger( p_address, p_offset, p_size, p_hex=true )
    {
      value = 0
      old_FormatInteger := a_FormatInteger
      if ( p_hex )
        SetFormat, integer, hex
      else
        SetFormat, integer, dec
      loop, %p_size%
        value := value+( *( ( p_address+p_offset )+( a_Index-1 ) ) << ( 8* ( a_Index-1 ) ) )
      SetFormat, integer, %old_FormatInteger%
      return, value
    }
    VarSetCapacity(memorystatus, 4+4+4+4+4+4+4+4)
    success := DllCall("kernel32.dll\GlobalMemoryStatus", "uint", &memorystatus)
    Physical_RamPorcent := ReadInteger(&memorystatus,4,4, false) . "%"
    Physical_RamTotal := Round(ReadInteger(&memorystatus,8,4, false)/(1024*1024),0) ;. " MB"
    Physical_RamLibre := Round(ReadInteger(&memorystatus,12,4, false)/(1024*1024),0) ;. " MB"
    Physical_PageFileTotal := Round(ReadInteger(&memorystatus,16,4, false)/(1024*1024),0) ;. " MB"
    Physical_PageFileLibre := Round(ReadInteger(&memorystatus,20,4, false)/(1024*1024),0) ;. " MB"
    Physical_VirtualTotal := Round(ReadInteger(&memorystatus,24,4, false)/(1024*1024),0) ;. " MB"
    Physical_VirtualLibre := Round(ReadInteger(&memorystatus,28,4, false)/(1024*1024),0) ;. " MB"
     
    ;###########################################
    ; AUDIO
    ;###########################################
    objWMIService := ComObjGet("winmgmts:\\.\root\cimv2")
    colItems := objWMIService.ExecQuery("SELECT * FROM Win32_SoundDevice")._NewEnum
    while colItems[objItem]
    {
      Sound_Name := objItem.Name
      Sound_Caption := objItem.Caption
      Sound_CreationClassName := objItem.CreationClassName
      Sound_Description := objItem.Description
      Sound_DeviceID := objItem.DeviceID
      Sound_ErrorDescription := objItem.ErrorDescription
      Sound_ManuFacturer := objItem.Manufacturer
      Sound_PNPDeviceID := objItem.PNPDeviceID
      Sound_ProductName := objItem.ProductName
      Sound_Status := objItem.Status
      Sound_SystemCreationClassName := objItem.SystemCreationClassName
      Sound_SystemName := objItem.SystemName
    }
     
    ;###########################################
    ; CACHE
    ;###########################################
    objWMIService := ComObjGet("winmgmts:\\.\root\cimv2")
    colItems := objWMIService.ExecQuery("Select * from Win32_CacheMemory")._NewEnum
    while colItems[objItem]
    {
      CACHE_Caption := objItem.Caption
      CACHE_Name := objItem.Name
      CACHE_Location := objItem.Location
      CACHE_CreationClassName := objItem.CreationClassName
      CACHE_Description := objItem.Description
      CACHE_DeviceID := objItem.DeviceID
      CACHE_ErrorDescription := objItem.ErrorDescription
      CACHE_ErrorMethodology := objItem.ErrorMethodology
      CACHE_OtherErrorDescription := objItem.OtherErrorDescription
      CACHE_PNPDeviceID := objItem.PNPDeviceID
      CACHE_Purpose := objItem.Purpose
      CACHE_Status := objItem.Status
      CACHE_SystemCreationClassName := objItem.SystemCreationClassName
      CACHE_SystemName := objItem.SystemName
    }
     
    ;###########################################
    ; BUS
    ;###########################################
    objWMIService := ComObjGet("winmgmts:\\.\root\cimv2")
    colItems := objWMIService.ExecQuery("Select * from Win32_Bus")._NewEnum
    while colItems[objItem]
    {
      BUS_Caption := objItem.Caption
      BUS_CreationClassName := objItem.CreationClassName
      BUS_Description := objItem.Description
      BUS_DeviceID := objItem.DeviceID
      BUS_ErrorDescription := objItem.ErrorDescription
      BUS_Name := objItem.Name
      BUS_PNPDeviceID := objItem.PNPDeviceID
      BUS_Status := objItem.Status
      BUS_SystemCreationClassName := objItem.SystemCreationClassName
      BUS_SystemName := objItem.SystemName
    }
     
    ;###########################################
    ; PROCESADOR
    ;###########################################
    objWMIService := ComObjGet("winmgmts:\\.\root\cimv2")
    colItems := objWMIService.ExecQuery("Select * from Win32_Processor")._NewEnum
    while colItems[objItem]
    {
      PROC_Caption := objItem.Caption
      PROC_CreationClassName := objItem.CreationClassName
      PROC_Description := objItem.Description
      PROC_DeviceID := objItem.DeviceID
      PROC_ErrorDescription := objItem.ErrorDescription
      PROC_Manufacturer := objItem.Manufacturer
      PROC_Name := objItem.Name
      PROC_OtherFamilyDescription := objItem.OtherFamilyDescription
      PROC_PNPDeviceID := objItem.PNPDeviceID
      PROC_ProcessorId := objItem.ProcessorId
      PROC_Role := objItem.Role
      PROC_SocketDesignation := objItem.SocketDesignation
      PROC_Status := objItem.Status
      PROC_Stepping := objItem.Stepping
      PROC_SystemCreationClassName := objItem.SystemCreationClassName
      PROC_SystemName := objItem.SystemName
      PROC_UniqueId := objItem.UniqueId
      PROC_Version := objItem.Version
    }
     
    ;###########################################
    ; REGISTRO
    ;###########################################
    RegRead, DPX_ICONSC, HKEY_LOCAL_MACHINE, Software\Microsoft\Windows\CurrentVersion\Explorer, Max Cached Icons
    RegRead, DPX_LOG8Q, HKEY_CURRENT_USER, AppEvents\EventLabels\Windows Logon, ExcludeFromCPL
    RegRead, DPX_LOG8C, HKEY_CURRENT_USER, AppEvents\EventLabels\Windows Logonoff, ExcludeFromCPL
    RegRead, DPX_MSDQ, HKEY_CURRENT_USER, SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced, ThumbnailLivePreviewHoverTime
    RegRead, DPX_MSDC, HKEY_CURRENT_USER, Control Panel\Desktop, MenuShowDelay
    RegRead, DPX_wtkstmeout, HKEY_LOCAL_MACHINE, SYSTEM\CurrentControlSet\Control, WaitToKillServiceTimeout
    RegRead, DPX_LSCACHE, HKEY_LOCAL_MACHINE, SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management, LargeSystemCache
    RegRead, DPX_DPEXECUTIVE, HKEY_LOCAL_MACHINE, SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management, DisablePagingExecutive
    RegRead, DPX_EPREFETC, HKEY_LOCAL_MACHINE, SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management\PrefethParameters, EnablePrefetcher
    RegRead, DPX_NMZRESERV, HKEY_LOCAL_MACHINE, SYSTEM\CurrentControlSet\Control\FileSystem, NtfsMftZoneReservation
    RegRead, DPX_NDLAUPDATE, HKEY_LOCAL_MACHINE, SYSTEM\CurrentControlSet\Control\FileSystem, NtfsDisableLastAccesUpdate
    RegRead, DPX_NMUSAGE, HKEY_LOCAL_MACHINE, SYSTEM\CurrentControlSet\Control\FileSystem, NtfsMemoryUsage
    RegRead, DPX_WTEXTENSION, HKEY_LOCAL_MACHINE, SYSTEM\CurrentControlSet\Control\FileSystem, Win92TruncatedExtensions
    RegRead, DPX_NLDSCHECKS, HKEY_CURRENT_USER, Software\Microsoft\Windows\CurrentVersion\Policies\Explorer, NoLowDiskSpaceChecks
    RegRead, DPX_NDCWIZARD, HKEY_CURRENT_USER, Software\Microsoft\Windows\CurrentVersion\Policies\Explorer, NoDesktopCleanupWizard
    RegRead, DPX_LRILINFO, HKEY_CURRENT_USER, Software\Microsoft\Windows\CurrentVersion\Policies\Explorer, LinkResolveIgnoreLinkInfo
    RegRead, DPX_NRSEARCH, HKEY_CURRENT_USER, Software\Microsoft\Windows\CurrentVersion\Policies\Explorer, NoResolveSearch
    RegRead, DPX_NRTRACK, HKEY_CURRENT_USER, Software\Microsoft\Windows\CurrentVersion\Policies\Explorer, NoResolveTrack
    RegRead, AlternateShell, HKEY_LOCAL_MACHINE, SYSTEM\CurrentControlSet\Control\SafeBoot, AlternateShell
    RegRead, REGISTRYMACHINESAM, HKEY_LOCAL_MACHINE, SYSTEM\CurrentControlSet\Control\hivelist, \REGISTRY\MACHINE\SAM
     
    ;###########################################
    ; VIDEO/CONTROLADOR
    ;###########################################
    objWMIService := ComObjGet("winmgmts:{impersonationLevel=impersonate}!\\" . strComputer . "\root\cimv2")
    colItems := objWMIService.ExecQuery("Select * from Win32_VideoController")._NewEnum
    while colItems[objItem]
    {
      VIDEO_AcceleratorCapabilities := objItem.AcceleratorCapabilities
      VIDEO_AdapterCompatibility := objItem.AdapterCompatibility
      VIDEO_AdapterDACType := objItem.AdapterDACType
      VIDEO_AdapterRAM .= objItem.AdapterRAM "`n" ;-->
            Loop, Parse, VIDEO_AdapterRAM, `n
            {
                    VIDEO_AdapterRAM := Round(A_LoopField/1024)
                    break
            } ;<--
      VIDEO_Availability := objItem.Availability
      VIDEO_CapabilityDescriptions := objItem.CapabilityDescriptions
      VIDEO_Caption := objItem.Caption
      VIDEO_ColorTableEntries := objItem.ColorTableEntries
      VIDEO_ConfigManagerErrorCode := objItem.ConfigManagerErrorCode
      VIDEO_ConfigManagerUserConfig := objItem.ConfigManagerUserConfig
      VIDEO_CreationClassName := objItem.CreationClassName
      VIDEO_CurrentBitsPerPixel := objItem.CurrentBitsPerPixel
      VIDEO_CurrentHorizontalResolution := objItem.CurrentHorizontalResolution
      VIDEO_CurrentNumberOfColors := objItem.CurrentNumberOfColors
      VIDEO_CurrentNumberOfColumns := objItem.CurrentNumberOfColumns
      VIDEO_CurrentNumberOfRows := objItem.CurrentNumberOfRows
      VIDEO_CurrentRefreshRate := objItem.CurrentRefreshRate
      VIDEO_CurrentScanMode := objItem.CurrentScanMode
      VIDEO_CurrentVerticalResolution := objItem.CurrentVerticalResolution
      VIDEO_Description := objItem.Description
      VIDEO_DeviceID := objItem.DeviceID
      VIDEO_DeviceSpecificPens := objItem.DeviceSpecificPens
      VIDEO_DitherType := objItem.DitherType
      VIDEO_DriverDate := objItem.DriverDate
      VIDEO_DriverVersion := objItem.DriverVersion
      VIDEO_ErrorCleared := objItem.ErrorCleared
      VIDEO_ErrorDescription := objItem.ErrorDescription
      VIDEO_ICMIntent := objItem.ICMIntent
      VIDEO_ICMMethod := objItem.ICMMethod
      VIDEO_InfFilename := objItem.InfFilename
      VIDEO_InfSection := objItem.InfSection
      VIDEO_InstallDate := objItem.InstallDate
      ;VIDEO_InstalledDisplayDriver := objItem.InstalledDisplayDriver
      VIDEO_LastErrorCode := objItem.LastErrorCode
      VIDEO_MaxMemorySupported := objItem.MaxMemorySupported
      VIDEO_MaxNumberControlled := objItem.MaxMemorySupported
      VIDEO_MaxRefreshRate := objItem.MaxRefreshRate
      VIDEO_MinRefreshRate := objItem.MinRefreshRate
      VIDEO_Monochrome := objItem.Monochrome
      VIDEO_Name := objItem.Name
      VIDEO_NumberOfColorPlanes := objItem.NumberOfColorPlanes
      VIDEO_NumberOfVideoPages := objItem.NumberOfVideoPages
      VIDEO_PNPDeviceID := objItem.PNPDeviceID
      VIDEO_PowerManagementCapabilities := objItem.PowerManagementCapabilities
      VIDEO_PowerManagementSupported := objItem.PowerManagementSupported
      VIDEO_ProtocolSupported := objItem.ProtocolSupported
      VIDEO_ReservedSystemPaletteEntries := objItem.ReservedSystemPaletteEntries
      VIDEO_SpecificationVersion := objItem.SpecificationVersion
      VIDEO_Status := objItem.Status
      VIDEO_StatusInfo := objItem.StatusInfo
      VIDEO_SystemCreationClassName := objItem.SystemCreationClassName
      VIDEO_SystemName := objItem.SystemName
      VIDEO_SystemPaletteEntries := objItem.SystemPaletteEntries
      VIDEO_TimeOfLastReset := objItem.TimeOfLastReset
      VIDEO_VideoArchitecture := objItem.VideoArchitecture
      VIDEO_VideoMemoryType := objItem.VideoMemoryType
      VIDEO_VideoMode := objItem.VideoMode
      VIDEO_VideoModeDescription := objItem.VideoModeDescription
      VIDEO_VideoProcessor := objItem.VideoProcessor
    }
     
    ;###########################################
    ; USB/CONTROLADOR
    ;###########################################
    objWMIService := ComObjGet("winmgmts:{impersonationLevel=impersonate}!\\" . strComputer . "\root\cimv2")
    colItems := objWMIService.ExecQuery("Select * from  Win32_USBController")._NewEnum
    while colItems[objItem]
    {
      USB_Availability := objItem.Availability
      USB_Caption := objItem.Caption
      USB_ConfigManagerErrorCode := objItem.ConfigManagerErrorCode
      USB_ConfigManagerUserConfig := objItem.ConfigManagerUserConfig
      USB_CreationClassName := objItem.CreationClassName
      USB_Description := objItem.Description
      USB_DeviceID := objItem.DeviceID
      USB_ErrorCleared := objItem.ErrorCleared
      USB_ErrorDescription := objItem.ErrorDescription
      USB_InstallDate := objItem.InstallDate
      USB_LastErrorCode := objItem.LastErrorCode
      USB_Manufacturer := objItem.Manufacturer
      USB_MaxNumberControlled := objItem.MaxNumberControlled
      USB_Name := objItem.Name
      USB_PNPDeviceID := objItem.PNPDeviceID
      USB_PowerManagementCapabilities := objItem.PowerManagementCapabilities
      USB_PowerManagementSupported := objItem.PowerManagementSupported
      USB_ProtocolSupported := objItem.ProtocolSupported
      USB_Status := objItem.Status
      USB_StatusInfo := objItem.StatusInfo
      USB_SystemCreationClassName := objItem.SystemCreationClassName
      USB_SystemName := objItem.SystemName
      USB_TimeOfLastReset := objItem.TimeOfLastReset
    }
     
    ;###########################################
    ; SEGURIDAD
    ;###########################################
    Bool(lab){
    if %lab%=1
        return "Reservado"
    else if %lab%=2
        return "Sistema Operativo"
    else if %lab%=3
        return "Utilidades Del Sistema"
    else if %lab%=4
        return "Sin Reinicio"
    }
    Cbs(lab){
    if %lab%=1
        return "Otro"
    else if %lab%=2
        return "Desconocido"
    else if %lab%=3
        return "Seguro"
    else if %lab%=4
        return "Advertencia"
    else if %lab%=5
        return "Critical"
    else if %lab%=6
        return "No Recuperable"
    }
    Dr(lab){
    if %lab%=0
        return "Estación De Trabajo Independiente"
    else if %lab%=1
        return "Estación De Trabajo De Miembros"
    else if %lab%=2
        return "Servidor Independiente"
    else if %lab%=3
        return "Servidor De Miembro"
    else if %lab%=4
        return "Controlador De Dominio De Copia De Seguridad"
    else if %lab%=5
        return "Controlador De Dominio Primario"
    }
    Fprs(lab){
    if %lab%=0
        return "Deshabilitado"
    else if %lab%=1
        return "Habilitado"
    else if %lab%=2
        return "No Implementado"
    else if %lab%=3
        return "Desconocido"
    }
    Srv(lab){
    if %lab%=0
        return "Servicio Deshabilitado"
    else if %lab%=1
        return "Servicio Activo"
    else if %lab%=2
        return "Servicio Activo"
    else if %lab%=3
        return "Servicio De Inicio Manual"
    else if %lab%=4
            return "Servicio Deshabilitado"
    }
    DecTo( n, to ) {
        hex := "0123456789ABCDEF"
        while ( n > 0 ) {
            rem := mod( n, to )
            n /= to
            y := SubStr( hex, rem + 1, 1 )
            result = %y%%result%
        }
        return, "0" . result
    }
    objWMIService := ComObjGet("winmgmts:\\localhost\root\SecurityCenter2") ;ANTIVIRUS
    colItems := objWMIService.ExecQuery("Select * from AntiVirusProduct")._NewEnum
    while colItems[objItem]
    {
        AV_displayName := objItem.displayName
            AV_instanceGuid := objItem.instanceGuid
        AV_pathToSignedProductExe := objItem.pathToSignedProductExe
        AV_pathToSignedReportingExe := objItem.pathToSignedReportingExe
        AV_productState := ((SubStr(DecTo(objItem.productState, 16), 3, 2) = 10) ? "Habilitado" : "Deshabilitado")
        AV_AV_productStateT := ((SubStr(DecTo(objItem.productState, 16), 5, 2) = 00) ? "Actualizado" : "Desactualizado")
    }
    objWMIService := ComObjGet("winmgmts:\\localhost\root\SecurityCenter2") ;ANTIMALWARE
    colItems := objWMIService.ExecQuery("Select * from AntiSpywareProduct")._NewEnum
    while colItems[objItem]
    {
        AM_displayName := objItem.displayName
            AM_instanceGuid := objItem.instanceGuid
        AM_pathToSignedProductExe := objItem.pathToSignedProductExe
        AM_pathToSignedReportingExe := objItem.pathToSignedReportingExe
            AM_productState := ((SubStr(DecTo(objItem.productState, 16), 3, 2) = 10) ? "Habilitado" : "Deshabilitado")
        AM_productState := ((SubStr(DecTo(objItem.productState, 16), 5, 2) = 00) ? "Actualizado" : "Desactualizado")
    }
    RegRead, SEGURITY_System, HKEY_LOCAL_MACHINE, SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System, EnableLUA ;UAC
    RegRead, SEGURITY_WuauServ, HKEY_LOCAL_MACHINE, SYSTEM\CurrentControlSet\Services\wuauserv, Start ;WIN UPDATE
    RegRead, SEGURITY_WinDefend, HKEY_LOCAL_MACHINE, SYSTEM\CurrentControlSet\Services\WinDefend, Start ;WINDOWS DEFENDER SERVICIO
    RegRead, SEGURITY_MpsSvc, HKEY_LOCAL_MACHINE, SYSTEM\CurrentControlSet\Services\MpsSvc, Start ;FIREWALL DE WINDOWS SERVICIO
    RegRead, SEGURITY_Start, HKEY_LOCAL_MACHINE, SYSTEM\CurrentControlSet\Services\wscsvc, Start ;CENTRO DE SEGURIDAD SERVICIO
     
     
     
     
     
    ;$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
    ; AGREGAR DATOS AL TREEVIEW
    ;$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
    Gui, po:Add, TreeView, x0 y0 w665 h305
    Gui, TreeView, TreeView_WindowsInfo
    Gui, po:Default
    P1 := TV_Add("Información Del Sistema")
            P1C1 := TV_Add("Sistema Operativo", P1)
                    TV_Add("Nombre: " A_OSVersion, P1C1)
                    TV_Add("Tipo: " A_OSType, P1C1)
                    TV_Add("Fabricante: " System_Manufacturer, P1C1)
                    TV_Add("Arquitectura: " System_OSArchitecture, P1C1)
                    TV_Add("SafeBoot\AlternateShell: " AlternateShell, P1C1)
                    TV_Add("Sam: " REGISTRYMACHINESAM, P1C1)
                    TV_Add("Nombre Completo: " System_Name, P1C1)
            P1C2 := TV_Add("Bios: " BIOS_Version, P1)
                    TV_Add("Fabricante: " BIOS_Manufacturer, P1C2)
                    TV_Add("Descripcion: " BIOS_Description, P1C2)
            P1C3 := TV_Add("Version: " System_Version " (" System_BuildType ")", P1)
            P1C4 := TV_Add("Permisos de Administrador: " A_IsAdmin, P1)
            P1C5 := TV_Add("Modo De Inicio: " PC_BootupState, P1)
            P1C6 := TV_Add("Opciones De Inicio: " System_StartOptions, P1)
            P1C7 := TV_Add("Archivo Dump: " System_DumpFile "|" System_MinidumpDir, P1)
            P1C8 := TV_Add("Directorio Del Sistema: " System_Directory "|" System_Device, P1)
            P1C9 := TV_Add("Fecha De Instalación: " System_InstallDate, P1)
            P1C10 := TV_Add("Tiempo Encendido: " System_LastBootUpTime, P1)
            P1C11 := TV_Add("Fecha y Horas Actuales: " A_DD "/" A_Mon "/" A_Year " - " A_Hour "h:" A_Min "m:" A_Sec "s", P1)
           
    P2 := TV_Add("Información Del Equipo")
            P2C1 := TV_Add("Nombe Del Equipo: " A_ComputerName "|" PC_Name, P2)
            P2C2 := TV_Add("Nombre Del Usuario: " A_UserName "|" PC_UserName " (Total: " System_NumberOfUsers ")", P2)
            P2C3 := TV_Add("Registrado A: " System_RegisteredUser, P2)
            P2C4 := TV_Add("Dominio: " PC_Domain, P2)
            P2C5 := TV_Add("Organizacion: " System_Organization, P2)
            P2C6 := TV_Add("Descripcion: " PC_Description "|" System_CreationClassName " /" PC_SystemType, P2)
            P2C7 := TV_Add("Idioma: " System_Language, P2)
            P2C8 := TV_Add("Fabricante: " PC_Manufacturer, P2)
            P2C9 := TV_Add("Modelo: " PC_Model, P2)
            P2C10 := TV_Add("Dispositivo De Inicio: " System_BootDevice, P2)
            P2C11 := TV_Add("Opciones", P2)
                    P2C11S1 := TV_Add("Reiniciar Automaticamente: " PC_AutomaticResetCapability, P2C11)
                    P2C11S2 := TV_Add("Reiniciar Automaticamente (Boot): " PC_AutomaticResetBootOption, P2C11)
                    P2C11S3 := TV_Add("Opciones De Arranque Sobre El Límite: " Bool("PC_BootOptionOnLimit"), P2C11)
                    P2C11S4 := TV_Add("Soporte BootROM: " PC_BootROMSupported, P2C11)
                    P2C11S5 := TV_Add("Estado De Arranque Del Chasis: " Cbs("PC_ChassisBootupState"), P2C11)
                    P2C11S6 := TV_Add("Modo De Ahorro De Luz Diurna: " PC_DaylightInEffect, P2C11)
                    P2C11S7 := TV_Add("Grupo De Trabajo: " Dr("PC_DomainRole"), P2C11)
                    P2C11S8 := TV_Add("Configuración De Seguridad De Hardware Para El Botón De Reinicio: " Fprs("PC_FrontPanelResetStatus"), P2C11)
                    P2C11S9 := TV_Add("Puerto De Infrarrojos (IR): " PC_InfraredSupported, P2C11)
                    P2C11S10 := TV_Add("Nombre De Formato Del Sistema: " PC_NameFormat, P2C11)
                    P2C11S10 := TV_Add("Número De Procesadores Lógicos: " PC_NumberOfLogicalProcessors, P2C11)
                    P2C11S10 := TV_Add("Tipo De Sistema: " PC_SystemType, P2C11)
                           
    P3 := TV_Add("Arquitectura Fisica")
            P3C1 := TV_Add("Procesador", P3)
                    TV_Add("Nombre: " PROC_Name, P3C1)
                    TV_Add("Modelo: " PROC_Caption, P3C1)
                    TV_Add("Fabricante: " PROC_Manufacturer, P3C1)
                    TV_Add("Procesadores: " PC_NumberOfProcessors, P3C1)
            P3C2 := TV_Add("Controlador Audio: ", P3)
                    TV_Add("Nombre: " Sound_Name, P3C2)
                    TV_Add("Fabricante: " Sound_ManuFacturer, P3C2)
            P3C3 := TV_Add("Controlador Memoria: ", P3)
                    TV_Add("Tipo: " MEM_Caption, P3C3)
                    TV_Add("Fabricante: " MEM_Manufacturer, P3C3)
                    TV_Add("Capacidad: " Round(MEM_Ram / 1024, 2) " MB", P3C3)
            P3C3_2 := TV_Add("Controlador Video: ", P3)
              TV_Add("Nombre: " VIDEO_Caption, P3C3_2)
              TV_Add("Fabricante: " VIDEO_AdapterCompatibility, P3C3_2)
              TV_Add("Descripcion: " VIDEO_Description, P3C3_2)
              TV_Add("Tipo: " VIDEO_DeviceID, P3C3_2)
              TV_Add("Fecha: " VIDEO_DriverDate, P3C3_2)
              TV_Add("Archivo: " VIDEO_InfFilename "|" VIDEO_InfSection, P3C3_2)
              TV_Add("Capacidad: " VIDEO_AdapterRAM " MB", P3C3_2)
            P3C3_3 := TV_Add("Controlador USB: ", P3)
              TV_Add("Nombre: " USB_Caption, P3C3_3)
              TV_Add("Fabricante: " USB_Manufacturer, P3C3_3)
              TV_Add("Descripcion: " USB_Description, P3C3_3)
              TV_Add("ID Del Dispositivo: " USB_DeviceID, P3C3_3)
              TV_Add("Fecha: " USB_InstallDate, P3C3_3)
              TV_Add("Nombre Del Sistema: " USB_SystemName "|" VIDEO_InfSection, P3C3_3)
            TV_Add("::::: MEMORIA :::::", P3)
            P3C4 := TV_Add("Memoria Ram", P3)
                    TV_Add("Total: " Physical_RamTotal " MB", P3C4)
                    TV_Add("Libre: " Physical_RamLibre " MB", P3C4)
                    TV_Add("Uso: " (Physical_RamTotal - Physical_RamLibre) " MB (" Physical_RamPorcent ")", P3C4)
                    TV_Add("Etiqueta: " MEM_DeviceLocator, P3C4)
                    TV_Add("Tipo: " MEM_MemoryType, P3C4)
            P3C5 := TV_Add("Memoria Virtual", P3)
                    TV_Add("Total: " Physical_VirtualTotal " MB", P3C5)
                    TV_Add("Libre: " Physical_VirtualLibre " MB", P3C5)
                    TV_Add("Uso: " (Physical_VirtualTotal - Physical_VirtualLibre) " MB", P3C5)
            P3C6 := TV_Add("Archivo De Paginación", P3)
                    TV_Add("Total: " Physical_PageFileTotal " MB", P3C6)
                    TV_Add("Libre: " Physical_PageFileLibre " MB", P3C6)
                    TV_Add("Uso: " (Physical_PageFileTotal - Physical_PageFileLibre) " MB", P3C6)
                    TV_Add("Administrado Por El Sistema: " PC_AutomaticManagedPagefile, P3C6)
            P3C7 := TV_Add("Bus", P3)
                    TV_Add("Nombre: " BUS_SystemName, P3C7)
                    TV_Add("Descripcion: " BUS_DeviceID, P3C7)
            P3C8 := TV_Add("Cache", P3)
                    TV_Add("Nombre: " CACHE_SystemName, P3C8)
                    TV_Add("Tipo: " CACHE_Purpose, P3C8)
            TV_Add("::::: COMPONENTES :::::", P3)
            P3C9 := TV_Add("Mouse", P3)
                    TV_Add("Nombre: " A_Cursor, P3C9)
                    TV_Add("Descripcion: " Mouse_Description, P3C9)
                    TV_Add("Hardware: " Mouse_HardwareType, P3C9)
                    TV_Add("Velocidad: " Mouse_Speed, P3C9)
            P3C10 := TV_Add("Pantalla", P3)
                    TV_Add("Ancho: " A_ScreenWidth, P3C10)
                    TV_Add("Alto: " A_ScreenHeight, P3C10)
            P3C11 := TV_Add("Monitor", P3)
                    TV_Add("Nombre: " MonitorName, P3C11)
                    TV_Add("Descripcion: " Monitor, P3C11)
                    TV_Add("Cantidad: " MonitorCount, P3C11)
                    TV_Add("Área De Trabajo: " MonitorWorkArea, P3C11)
                    TV_Add("Primario: " MonitorPrimary, P3C11)
     
    P4 := TV_Add("Información De Red")
            P4C1 := TV_Add("Nombre: " Network_Caption, P4)
            P4C2    := TV_Add("Descripcion: " Network_Description, P4)
            P4C3 := TV_Add("Servicio: " Network_ServiceName, P4)
            P4C4 := TV_Add("Direccion MAC: " Network_MacAdress, P4)
            P4C5 := TV_Add("Direccion IP", P4)
                    TV_Add("Direccion IP #1: " A_IPAddress1, P4C5)
                    TV_Add("Direccion IP #2: " A_IPAddress2, P4C5)
                    TV_Add("Direccion IP #3: " A_IPAddress3, P4C5)
                    TV_Add("Direccion IP #4: " A_IPAddress4, P4C5)
     
    P5 := TV_Add("Rutas")
            TV_Add("Particion Del Sistema: " System_Drive, P5)
            TV_Add("Directorio Del Sistema: " System_Directory, P5)
            TV_Add("Directorio Del Windows: " System_WindowsDirectory, P5)
            TV_Add("Temporales: " A_Temp, P5)
            TV_Add("Datos De Programa: " A_AppDataCommon, P5)
            TV_Add("Datos De Programa Ext: " A_AppData, P5)
            TV_Add("Escritorio: " A_Desktop, P5)
            TV_Add("Escritorio Ext: " A_DesktopCommon, P5)
            TV_Add("Documentos: " A_MyDocuments, P5)
            TV_Add("Archivos De Programa: " A_ProgramFiles, P5)
            TV_Add("Archivos De Programa Ext: " A_ProgramsCommon, P5)
            TV_Add("Inicio: " A_Startup, P5)
            TV_Add("Inicio Ext: " A_StartupCommon, P5)
     
    P6 := TV_Add("Registro De Windows")
            TV_Add("Max Cached Icons: " DPX_ICONSC " (2000)", P6)
            TV_Add("ExcludeFromCPL: " DPX_LOG8Q " (0)", P6)
            TV_Add("ExcludeFromCPL(off): " DPX_LOG8C " (0)", P6)
            TV_Add("ThumbnailLivePreviewHoverTime: " DPX_MSDQ " (200)", P6)
            TV_Add("MenuShowDelay: " DPX_MSDC " (<200)", P6)
            TV_Add("WaitToKillServiceTimeout: " DPX_wtkstmeout " (<8000 >3000)", P6)
            TV_Add("LargeSystemCache: " DPX_LSCACHE " (1)", P6)
            TV_Add("DisablePagingExecutive: " DPX_DPEXECUTIVE " (1)", P6)
            TV_Add("EnablePrefetcher: " DPX_EPREFETC " (5)", P6)
            TV_Add("NtfsMftZoneReservation: " DPX_NMZRESERV " (2)", P6)
            TV_Add("NtfsDisableLastAccesUpdate: " DPX_NDLAUPDATE " (1)", P6)
            TV_Add("NtfsMemoryUsage: " DPX_NMUSAGE " (2)", P6)
            TV_Add("Win92TruncatedExtensions: " DPX_WTEXTENSION " (0)", P6)
            TV_Add("NoLowDiskSpaceChecks: " DPX_NLDSCHECKS " (1)", P6)
            TV_Add("NoDesktopCleanupWizard: " DPX_NDCWIZARD " (1)", P6)
            TV_Add("LinkResolveIgnoreLinkInfo: " DPX_LRILINFO " (1)", P6)
            TV_Add("NoResolveSearch: " DPX_NRSEARCH " (1)", P6)
            TV_Add("NoResolveTrack: " DPX_NRTRACK " (1)", P6)
     
    P7 := TV_Add("Discos/Particiones/Unidades Del Equipo")
            gosub, TreeView_GetDrives
           
    P8 := TV_Add("Seguridad")
      P8C1 := TV_Add("Antivirus", P8)
        TV_Add("Nombre: " AV_displayName, P8C1)
        TV_Add("Estado: " AV_productState "|" AV_productStateT, P8C1)
        TV_Add("Directorio (ejecutable): " AV_pathToSignedProductExe, P8C1)
        TV_Add("Directorio (reportes): " AV_pathToSignedReportingExe, P8C1)
        TV_Add("Clave: " AV_instanceGuid, P8C1)
      P8C2 := TV_Add("Antimalware", P8)
        TV_Add("Nombre: " AM_displayName, P8C2)
        TV_Add("Estado: " AM_productState "|" AM_productStateT, P8C2)
        TV_Add("Directorio (ejecutable): " AM_pathToSignedProductExe, P8C2)
        TV_Add("Directorio (reportes): " AM_pathToSignedReportingExe, P8C2)
        TV_Add("Clave: " AM_instanceGuid, P8C2)
      P8C3 := TV_Add("Control De Cuentas De Usuario (UAC): " Srv("SEGURITY_System"), P8)
      P8C4 := TV_Add("Windows Update: " Srv("SEGURITY_WuauServ"), P8)
      P8C5 := TV_Add("Windows Defender: " Srv("SEGURITY_WinDefend"), P8)
      P8C6 := TV_Add("Firewall De Windows: " Srv("SEGURITY_MpsSvc"), P8)
      P8C7 := TV_Add("Centro De Seguridad: " Srv("SEGURITY_Start"), P8)
     
    P9 := TV_Add("Procesos Iniciados")
            gosub, TreeView_ProcessList
     
    P10 := TV_Add("Variables Del Sistema")
            gosub, TreeView_SystemVar
           
    P11 := TV_Add("Programas De Inicio Automático")
            gosub, TreeView_StartupPrograms
           
    P12 := TV_Add("Programas Instalados")
     
    P13 := TV_Add("Información Acerca De AutoHotKey: " A_Hour "h:" A_Min "m:" A_Sec "s")
            TV_Add("Version: " A_AhkVersion, P13)
            TV_Add("Ruta (ejecutable): " A_AhkPath, P13)
            TV_Add("Ruta (script): " A_ScriptFullPath, P13)
            TV_Add("Compilado: " A_IsCompiled, P13)
            TV_Add("Error: " A_LastError, P13)
            TV_Add("Descripcion: Herramienta(AHK) de Análisis e investigación", P13)
           
           
    Gui, po:Show
     
     
     
     
     
     
     
    ;###########################################
    ; PROGRAMAS DE INICIO AUTOMÁTICO
    ;###########################################
    TreeView_StartupPrograms:
    Loop, HKEY_LOCAL_MACHINE, Software\Microsoft\Windows\CurrentVersion\Run, 1, 1
    {
            if A_LoopRegName not in %ParseList%
            {
                    RegRead, StartupReg1, HKLM, Software\Microsoft\Windows\CurrentVersion\Run, % A_LoopRegName
                    P11X1%A_Index% := TV_Add(A_LoopRegName, P11)
                            TV_Add("Ruta: " StartupReg1, P11X1%A_Index%)
            }
            ParseList .= A_LoopRegName ","
    }
    Loop, HKEY_CURRENT_USER, Software\Microsoft\Windows\CurrentVersion\Run, 1, 1
    {
            if A_LoopRegName not in %ParseList%
            {
                    RegRead, StartupReg1, HKCU, Software\Microsoft\Windows\CurrentVersion\Run, % A_LoopRegName
                    P11X2%A_Index% := TV_Add(A_LoopRegName, P11)
                            TV_Add("Ruta: " StartupReg1, P11X2%A_Index%)
            }
            ParseList .= A_LoopRegName ","
    }
    Loop, HKEY_LOCAL_MACHINE, Software\Microsoft\Windows\CurrentVersion\RunOnce, 1, 1
    {
            if A_LoopRegName not in %ParseList%
            {
                    RegRead, StartupReg1, HKLM, Software\Microsoft\Windows\CurrentVersion\RunOnce, % A_LoopRegName
                    P11X3%A_Index% := TV_Add(A_LoopRegName, P11)
                            TV_Add("Ruta: " StartupReg1, P11X3%A_Index%)
            }
            ParseList .= A_LoopRegName ","
    }
    Loop, HKEY_CURRENT_USER, Software\Microsoft\Windows\CurrentVersion\RunOnce, 1, 1
    {
            if A_LoopRegName not in %ParseList%
            {
                    RegRead, StartupReg1, HKCU, Software\Microsoft\Windows\CurrentVersion\RunOnce, % A_LoopRegName
                    P11X4%A_Index% := TV_Add(A_LoopRegName, P11)
                            TV_Add("Ruta: " StartupReg1, P11X4%A_Index%)
            }
            ParseList .= A_LoopRegName ","
    }
    return
     
    ;###########################################
    ; VARIABLES DEL SISTEMA
    ;###########################################
    TreeView_SystemVar:
    Loop, HKEY_LOCAL_MACHINE, SYSTEM\CurrentControlSet\Control\Session Manager\Environment, 1, 1
    {
            RegRead, DatVars, HKLM, SYSTEM\CurrentControlSet\Control\Session Manager\Environment, % A_LoopRegName
            P10X%A_Index% := TV_Add(A_LoopRegName, P10)
                    TV_Add("Datos: " DatVars, P10X%A_Index%)
    }
    return
     
    ;###########################################
    ; DISCOS/PARTICIONES
    ;###########################################
    TreeView_GetDrives:
    DriveGet, List, List ;listar unidades
    Loop, Parse, List
    {
            if A_LoopField not in %ParseList%
            {
                    DriveGet, cap, capacity, % A_LoopField ":"
                    DrivespaceFree, free, % A_LoopField ":"
                    DriveGet, fs, fs, % A_LoopField ":"
                    DriveGet, label, label, % A_LoopField ":"
                    DriveGet, serial, serial, % A_LoopField ":"
                    DriveGet, type, type, % A_LoopField ":"
                    DriveGet, status, status, % A_LoopField ":"
     
                    P4X%A_Index% := TV_Add(A_LoopField ":\", P7)
                            TV_Add("Nombre: " label, P4X%A_Index%)
                            TV_Add("Tipo: " type, P4X%A_Index%)
                            TV_Add("Sistema De Archivos: " fs, P4X%A_Index%)
                            TV_Add("Estado: " status, P4X%A_Index%)
                            TV_Add("Número De Serie: " serial, P4X%A_Index%)
                            TV_Add("Espacio Total: " Round(cap / 1024, 2) " GB", P4X%A_Index%)
                            TV_Add("Espacio Libre: " Round(free / 1024, 2) " GB", P4X%A_Index%)
                            TV_Add("Espacio En Uso: " Round((cap - free) / 1024, 2) " GB", P4X%A_Index%)
            }
            ParseList .= A_LoopField ","
    }
    return
           
    ;###########################################
    ; PROCESOS INICIADOS
    ;###########################################
    TreeView_ProcessList:
    For process in ComObjGet("winmgmts:").ExecQuery("Select * from Win32_Process")
            Process_OnlyName .= process.Name "`n"
    Loop, Parse, Process_OnlyName,`n
    {
            if (TempParse!=A_LoopField AND A_LoopField!="" AND A_LoopField!=A_Space AND A_LoopField!=A_Tab)
                    TV_Add(A_LoopField, P9)
            TempParse:=A_LoopField
    }
    return

